services:
  web:
    build:
      context: distvue
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    networks:
      - mynetwork

  backend:
    build:
      context: backend
      args:
        delta_worker_type: ${delta_worker_type}
        duck_worker_type: ${duck_worker_type}
    ports:
      - 8081:8001
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - mynetwork

  deltaworker:
    build:
      context: deltaworker
      args:
        worker_type: ${delta_worker_type}
    deploy:
      mode: replicated
      replicas: ${delta_worker_replicas}
    volumes:
      - ./data:/usr/src/app/data
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - mynetwork

  duckworker:
    build:
      context: duckworker
      args:
        worker_type: ${duck_worker_type}
    deploy:
      mode: replicated
      replicas: ${duck_worker_replicas}
    volumes:
      - ./data:/usr/src/app/data
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - mynetwork
    
  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "15672:15672" # Management interface
      - "5672:5672"   # RabbitMQ server
    healthcheck: # Healthcheck is required for starting workers
      test: ["CMD", "rabbitmq-diagnostics", "ping", "-q"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mynetwork

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - mynetwork

networks:
  mynetwork: